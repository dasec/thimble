/*
 *  THIMBLE --- Research Library for Development and Analysis of
 *  Fingerprint-Based Biometric Cryptosystems.
 *
 *  Copyright 2014, 2015 Benjamin Tams
 *
 *  THIMBLE is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.
 *
 *  THIMBLE is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with THIMBLE. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file FuzzyVault.h
 *
 * @brief
 *            Provides a class for representing general instances
 *            of an implementation of the improved fuzzy vault scheme by
 *            Dodis et al..
 *
 * @author Benjamin Tams
 */

#ifndef THIMBLE_FUZZYVAULT_H_
#define THIMBLE_FUZZYVAULT_H_

#include <stdint.h>

#include <thimble/math/Permutation.h>
#include <thimble/math/numbertheory/BigInteger.h>
#include <thimble/math/numbertheory/SmallBinaryField.h>
#include <thimble/math/numbertheory/SmallBinaryFieldPolynomial.h>
#include <thimble/security/AES.h>

/**
 * @brief
 *            The library's namespace.
 */
namespace thimble {

	/**
	 * @brief
	 *            Objects from this class represent instances of a
	 *            fuzzy vault implementation based on the construction of
	 *            Dodis et al..
	 */
	class THIMBLE_DLL FuzzyVault {

	public:

		/**
		 * @brief Standard constructor.
		 *
		 * @details Instances generated by the standard constructor may still
		 * require to be initialized properly before they can be used to
		 * for protected template generation via \link enroll()\endlink.
		 *
		 * @see setVaultSize()
		 * @see setMaxGenuineFeatures()
		 * @see setSecretSize()
		 * @see fromBytes()
		 * @see read()
		 */
		FuzzyVault();

		/**
		 * @brief Creates a fuzzy vault object by specifying its parameters.
		 *
		 * @details Objects created with this constructor, may be ready for
		 * protected data generation via the \link enroll()\endlink function.
		 *
		 * @param n Size of the feature universe, i.e., the vault size.
		 *
		 * @param tmax Maximal bound on the genuine features protected by
		 * the vault.
		 *
		 * @param k Size of the secret polynomial that is bound to the
		 * genuine feature set.
		 *
		 * @warning If the relations \f$0<k\leq tmax\leq n\f$ is not
		 * satisfied, then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If not enough memory could be provided, an error message
		 * may be written to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 */
		FuzzyVault( int n , int tmax , int k );

		/**
		 * @brief Copy constructor.
		 *
		 * @param vault The fuzzy vault object of which a copy is created.
		 *
		 * @warning If not enough memory could be provided, an error message
		 * may be written to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 */
		FuzzyVault( const FuzzyVault & vault );

		/**
		 * @brief Destructor.
		 */
		virtual ~FuzzyVault();

		/**
		 * @brief Assignment operator (procedural version)
		 *
		 * @param vault The fuzzy vault object that is assigned to this
		 * object.
		 *
		 * @warning If not enough memory could be provided, an error message
		 * may be written to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 */
		void assign( const FuzzyVault & vault );

		/**
		 * @brief Assignment operator.
		 *
		 * @param vault The fuzzy vault object that is assigned to this
		 * object.
		 *
		 * @return A reference to this object (after assignment).
		 *
		 * @warning If not enough memory could be provided, an error message
		 * may be written to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 *
		 * @see assign()
		 */
		FuzzyVault & operator=( const FuzzyVault & vault );

		/**
		 * @brief Swaps the content of this object with the content of the
		 * specified fuzzy vault object.
		 *
		 * @param vault The fuzzy vault object with which the content of this
		 * object is exchanged.
		 */
		void swap( FuzzyVault & vault );

		/**
		 * @brief Specifies the size of the feature universe before
		 * enrolment.
		 *
		 * @details Fuzzy vault processes a finite field/Galois field to
		 * encode features. The size of the finite field must at least be
		 * of equals to the feature universe size. Consequently, calling this
		 * method may cause an internal (re)construction of a finite field
		 * which can be time-consuming.
		 *
		 * @param n The size of the feature universe.
		 *
		 * @warning If \link isEnrolled()\endlink returns <code>true</code>,
		 * then an error message will be printed to <code>stderr</code> and
		 * the program exits with status 'EXIT_FAILURE'.
		 *
		 * @warning If on a subsequent enrolment with this fuzzy vault object
		 * using \link enroll()\endlink
		 * the relation 0<\link getSecretSize()\endlink
		 * <= \link getMaxGenuineFeatures()\endlink
		 * <= \link getVaultSize()\endlink is not satisfied, the program may
		 * print an error message to <code>stderr</code> and exits with
		 * status 'EXIT_FAILURE'.
		 *
		 * @warning If <i>n</i> is smaller than or equals to 0, then
		 * an error message will be printed to <code>stderr</code> and
		 * the program exits with status 'EXIT_FAILURE'.
		 *
		 * @warning If not enough memory could be provided, an error message
		 * may be written to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 *
		 * @see getVaultSize()
		 */
		void setVaultSize( int n );

		/**
		 * @brief Specifies an upper bound for the number of genuine features
		 * protected by the vault.
		 *
		 * @param tmax The new maximal number of genuine features that the
		 * fuzzy vault object will protected on enrollment; must be greater
		 * than 0.
		 *
		 * @warning If the method is called while the fuzzy vault object
		 * protects a feature set (i.e., if \link isEnrolled()\endlink returns
		 * <code>true</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If on a subsequent enrollment with this fuzzy vault object
		 * using \link enroll()\endlink
		 * the relation 0<\link getSecretSize()\endlink
		 * <= \link getMaxGenuineFeatures()\endlink
		 * <= \link getVaultSize()\endlink is not satisfied, the program may
		 * print an error message to <code>stderr</code> and exits with
		 * status 'EXIT_FAILURE'.
		 *
		 * @see getMaxGenuineFeatures()
		 */
		void setMaxGenuineFeatures( int tmax );

		/**
		 * @brief Species the size of the secret polynomial being bound to
		 * the genuine feature set on enrollment.
		 *
		 * @param k The new size of the secret polynomial being bound to the
		 * genuine feature set on enrollment; must be greater than 0.
		 *
		 * @warning If the method is called while the fuzzy vault object
		 * protects a feature set (i.e., if \link isEnrolled()\endlink returns
		 * <code>true</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If on a subsequent enrollment with this fuzzy vault object
		 * using \link enroll()\endlink
		 * the relation 0<\link getSecretSize()\endlink
		 * <= \link getMaxGenuineFeatures()\endlink
		 * <= \link getVaultSize()\endlink is not satisfied, the program may
		 * print an error message to <code>stderr</code> and exits with
		 * status 'EXIT_FAILURE'.
		 *
		 * @see getSecretSize()
		 */
		void setSecretSize( int k );

		/**
		 * @brief Specifies a slow-down factor by which the time to open
		 * the vault is artificially increased.
		 *
		 * @param slowDownFactor The new slow-down factor by which the time
		 * for opening the vault is increased; must be greater than 0.
		 *
		 * @warning If the method is called while the fuzzy vault object
		 * protects a feature set (i.e., if \link isEnrolled()\endlink returns
		 * <code>true</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @see getSlowDownFactor()
		 */
		void setSlowDownFactor
			( const BigInteger & slowDownFactor );

		/**
		 * @brief Returns the size of the feature universe that has been
		 * specified for this fuzzy vault object.
		 *
		 * @details The value for the feature universe size must be specified,
		 * e.g., via \link setVaultSize()\endlink; otherwise, the function
		 * returns 0.
		 *
		 * @return The size of the feature universe specified for this fuzzy
		 * vault object.
		 *
		 * @see setVaultSize()
		 */
		int getVaultSize() const;

		/**
		 * @brief Returns the maximal number of genuine features this
		 * fuzzy vault object is going to protect on enrollment.
		 *
		 * @details The value for the maximal number of genuine features must
		 * be specified, e.g., via \link setMaxGenuineFeatures()\endlink;
		 * otherwise, the function returns 0.
		 *
		 * @return The maximal number of genuine features this fuzzy vault
		 * object is going to protect on enrollment.
		 *
		 * @see setMaxGenuineFeatures()
		 */
		int getMaxGenuineFeatures() const;

		/**
		 * @brief Returns the size of the secret polynomial that is bound
		 * to the genuine feature set on enrollment.
		 *
		 * @details The value for the secret size must be specified, e.g.,
		 * via \link setSecretSize()\endlink; otherwise, the function
		 * returns 0.
		 *
		 * @return The size of the secret polynomial being bound to the
		 * genuine feature sets on enrollment.
		 *
		 * @see setSecretSize()
		 */
		int getSecretSize() const;

		/**
		 * @brief Returns the factor by which any attempts to open the
		 * vault is artificially increased.
		 *
		 * @details Unless specified manually
		 * via \link setSlowDownFactor()\endlink, the slow-down factor
		 * is chosen as 1 by default.
		 *
		 * @return The factor by which any attempt to open the vault
		 * (via \link open()\endlink or \link verify()\endlink) is
		 * artificially increased.
		 *
		 * @see setSlowDownFactor()
		 */
		const BigInteger & getSlowDownFactor() const;

		/**
		 * @brief Generates protected data from the specified feature set
		 * and stores the result in this fuzzy vault object.
		 *
		 * @details If the size of the feature set <i>t</i> is larger
		 * than <i>tmax=</i>\link getMaxGenuineFeatures()\endlink, then
		 * only the first <i>tmax</i> features are used to generated the
		 * protected data; otherwise, all <i>t</i> features (padded with
		 * <i>tmax</i> blending features) are used.
		 *
		 * @param features Contains <i>t</i> distinct integers of type
		 * <code>uint32_t</code> smaller than \link getVaultSize()\endlink.
		 *
		 * @param t The number of 32-bit integers stored in
		 * <code>features</code>.
		 *
		 * @return <code>true</code> if the protected data has been
		 * successfully generated from the input; otherwise, i.e., if
		 * <i>t</i> is smaller than \link getSecretSize()\endlink, then
		 * the function returns <code>false</code>.
		 */
		bool enroll( const uint32_t *features , int t );

		/**
		 * @brief Generates protected data from the specified feature set
		 * and stores the result in this fuzzy vault object.
		 *
		 * @details If the size of the feature set <i>t</i> is larger
		 * than <i>tmax=</i>\link getMaxGenuineFeatures()\endlink, then
		 * only the first <i>tmax</i> features are used to generated the
		 * protected data; otherwise, all <i>t</i> features (padded with
		 * <i>tmax</i> blending features) are used.
		 * <br><br>
		 * This function does nothing else than calling
		 * the \link enroll()\endlink function (with two 'l's).
		 *
		 * @param features Contains <i>t</i> distinct integers of type
		 * <code>uint32_t</code> smaller than \link getVaultSize()\endlink.
		 *
		 * @param t The number of 32-bit integers stored in
		 * <code>features</code>.
		 *
		 * @return <code>true</code> if the protected data has been
		 * successfully generated from the input; otherwise, i.e., if
		 * <i>t</i> is smaller than \link getSecretSize()\endlink, then
		 * the function returns <code>false</code>.
		 *
		 * @see enroll()
		 */
		bool enrol( const uint32_t *features , int t );

		/**
		 * @brief The functions checks whether the query feature set
		 * sufficiently agrees with the feature set protected by this fuzzy
		 * vault object.
		 *
		 * @details Let \f$A\f$ denote the feature set protected by this
		 * fuzzy vault object and let \f$B\f$ denote the query feature set.
		 * On verification, an implementation of a Guruswami-Sudan algorithm
		 * is used which assumes that \f$|A\cap B|>\sqrt{|B|\cdot (k-1)}\f$
		 * where \f$k=\f$\link getSecretSize()\endlink for a successful
		 * verification. It is important to note that \f$|A\cap B|\f$ is
		 * required to be even larger because the Guruswami-Sudan algorithm
		 * is run with the constant
		 * multiplicity \link getGuruswamiSudanMultiplicity()\endlink which
		 * is equals to 1 by default.
		 *
		 * @param queryFeatures Contains <i>s</i> distinct integers of type
		 * <code>uint32_t</code> smaller than \link getVaultSize()\endlink.
		 *
		 * @param s The number of 32-bit integers stored in
		 * <code>queryFeatures</code>.
		 *
		 * @return <code>true</code> if the query feature set sufficiently
		 * agrees with the feature set protected by this fuzzy vault object;
		 * otherwise, the function returns <code>false</code>.
		 *
		 * @see open()
		 *
		 * @warning If \link isEnrolled()\endlink
		 * or \link isDecrypted()\endlink return <code>false</code>, an error
		 * message will be printed to <code>stderr</code> and the program
		 * exits with status 'EXIT_FAILURE'.
		 */
		bool verify( const uint32_t *queryFeatures , int s ) const;

		/**
		 * @brief Encrypts this enrolled fuzzy vault object using a
		 * key.
		 *
		 * @param key The \link AES128 AES\endlink key used to encrypt this
		 * fuzzy vault object.
		 *
		 * @warning If \link isEnrolled()\endlink is <code>false</code>
		 * or if \link isEncrypted()\endlink is <code>true</code>, an error
		 * message will be printed to <code>stderr</code> and the program
		 * exits with status 'EXIT_FAILURE'.
		 */
		void encrypt( const AES128 & key );

		/**
		 * @brief Decrypts this encrypted fuzzy vault object using a key.
		 *
		 * @details If this fuzzy vault object has already been decrypted
		 * with this method, it can be decrypted again which causes the old
		 * candidate for the decrypted fuzzy vault object to be replaced.
		 *
		 * @param key The \link AES128 AES\endlink key used to decrypt this
		 * fuzzy vault object.
		 *
		 * @warning If \link isEncrypted()\endlink is <code>false</code>, an
		 * error message will be printed to <code>stderr</code> and the
		 * program exits with status 'EXIT_FAILURE'.
		 */
		void decrypt( const AES128 & key );

		/**
		 * @brief Checks whether the fuzzy vault object has been initialized
		 * properly to potentially hold protected data.
		 *
		 * @details Note that if the function returns <code>true</code> and
		 * if \link isEnrolled()\endlink returns <code>false</code>, then
		 * protected data can be generated being helt by this fuzzy vault
		 * object using \link enroll()\endlink. Yet, a call
		 * of \link enroll()\endlink still could result in errors if the
		 * requirements are not fulfilled; see \link enroll()\endlink for
		 * more details.
		 *
		 * @return <code>true</code> if the fuzzy vault object has been
		 * initialized; otherwise, the function returns <code>false</code>.
		 */
		bool isInitialized() const;

		/**
		 * @brief Checks whether the fuzzy vault object holds protected
		 * data that has been generated from a feature set.
		 *
		 * @details After calling \link enroll()\endlink of which return value
		 * was <code>true</code>, this functions returns <code>true</code>.
		 *
		 * @return <code>true</code> if the fuzzy vault object holds protected
		 * data; otherwise, the function returns <code>false</code>.
		 */
		bool isEnrolled() const;

		/**
		 * @brief Checks whether the fuzzy vault object holds protected
		 * data that has been generated from a feature set.
		 *
		 * @details After calling \link enroll()\endlink of which return value
		 * was <code>true</code>, this functions returns <code>true</code>.
		 * <br><br>
		 * This function does nothing  else but calling
		 * the \link isEnrolled()\endlink (with two 'l's).
		 *
		 * @return <code>true</code> if the fuzzy vault object holds protected
		 * data; otherwise, the function returns <code>false</code>.
		 */
		bool isEnroled() const;

		/**
		 * @brief Checks whether the fuzzy vault object holds protected data
		 * that was additionally encrypted using a secret key.
		 *
		 * @details Note that if the fuzzy vault object has been decrypted
		 * using \link decrypt()\endlink, then this function still returns
		 * <code>true</code> as the decrypted data can be replaced by another
		 * call of \link decrypt()\endlink, this assumes
		 * that \link isEnrolled()\endlink is <code>true</code>.
		 *
		 * @return <code>true</code> if the fuzzy vault object holds encrypted
		 * data; otherwise, the function returns <code>false</code>.
		 */
		bool isEncrypted() const;

		/**
		 * @brief Checks whether the fuzzy vault object holds decrypted data.
		 *
		 * @details The function returns <code>false</code> right after a
		 * successful call of \link encrypt()\endlink. If
		 * then \link decrypt()\endlink is called, the function returns
		 * <code>true</code> which indicates that \link verify()\endlink can
		 * be called without leading to an error. Note that if this fuzzy
		 * vault object does not contain encrypted data that requires
		 * decryption via \link decrypt()\endlink, the value of this function
		 * is <code>true</code>.
		 *
		 *
		 * @return <code>true</code> if the fuzzy vault object holds decrypted
		 * data; otherwise, the function returns <code>false</code>.
		 */
		bool isDecrypted() const;

		/**
		 * @brief Clears all protected and encrypted data helt by this fuzzy
		 * vault object.
		 *
		 * @details After this function is called, the fuzzy vault object
		 * represents a state being equivalent to the state right before the
		 * last call of \link enroll()\endlink (if any).
		 */
		void clear();

		/**
		 * @brief Accesses a constant reference to the finite field over which
		 * this fuzzy vault object operates.
		 *
		 * @return A constant reference to the finite field over which this
		 * fuzzy vault object operates.
		 *
		 * @warning If the size of the vault size has not been specified
		 * (neither on construction nor with \link setVaultSize()\endlink), an
		 * error message will be printed to <code>stderr</code> and the
		 * program exits with status 'EXIT_FAILURE' when calling this
		 * function.
		 */
		const SmallBinaryField & getField() const;

		/**
		 * @brief Returns the 160-bit (20-byte) hash value of the secret
		 * key bound to the feature set protected by this fuzzy vault object.
		 *
		 * @details After successful enrollment via \link enroll()\endlink a
		 * secret polynomial will be bounded to the feature set passed
		 * through \link enroll()\endlink. In order to allow safe
		 * verification, the \link SHA SHA1\endlink hash value of the secret
		 * polynomial is stored of which result can be accessed by this
		 * function.
		 *
		 * @return An array containing 20 bytes.
		 */
		const uint8_t * getHash() const;

		/**
		 * @brief Attempts to opens the fuzzy vault object with the help a
		 * query feature set.
		 *
		 * @details This function is a low-level version
		 * of \link verify()\endlink which allows to fully recover the
		 * data protected by this fuzzy vault object if a query set
		 * is provided that sufficiently agrees with the feature set
		 * protected.
		 *
		 * @param f Output in which the secret polynomial will be stored
		 * if the vault has been successfully opened.
		 *
		 * @param features Output array being capable of storing at
		 * least \link getMaxGenuineFeatures()\endlink integers of type
		 * <code>uint32_t</code> in which the genuine features protected
		 * by this fuzzy vault object are stored after the vault has been
		 * successfully opened; the value of this field can be NULL in which
		 * case no features are output.
		 *
		 * @param featureSizePtr Pointer to an integer in which the number
		 * of genuine features contained in <code>features</code> is stored
		 * after this fuzzy vault object has been successfully opened; will
		 * be ignored if the value is <code>NULL</code> or if the value of
		 * <code>features</code> is NULL.
		 *
		 * @param queryFeatures Contains <i>s</i> distinct integers of type
		 * <code>uint32_t</code> smaller than \link getVaultSize()\endlink.
		 *
		 * @param s The number of 32-bit integers stored in
		 * <code>queryFeatures</code>.
		 *
		 * @return <code>true</code> if the vault has been successfully
		 * opened; otherwise, the function returns <code>false</code>.
		 *
		 * @see verify()
		 *
		 * @warning If \link isEnrolled()\endlink
		 * or \link isDecrypted()\endlink return <code>false</code>, an error
		 * message will be printed to <code>stderr</code> and the program
		 * exits with status 'EXIT_FAILURE'.
		 */
		bool open
		( SmallBinaryFieldPolynomial & f ,
		  uint32_t *features , int *featureSizePtr ,
		  const uint32_t *queryFeatures , int s ) const;

		/**
		 * @brief Derives the vault polynomial from the data stored by
		 * this object.
		 *
		 * @details If \link getSlowDownFactor()\endlink equals 1
		 * (which is the case by default), then this function can be
		 * called without specifying an argument thereby returning the
		 * correct vault polynomial.
		 *
		 * Otherwise, the correct vault polynomial has been
		 * encrypted using a random secret key derived from an
		 * integer, to which we refer as the <i>slow-down value</i>,
		 * smaller than \link getSlowDownFactor()\endlink and then the
		 * correct vault polynomial will be returned if the correct
		 * slow-down value has been passed to this function.
		 *
		 * This function is used by the \link open()\endlink
		 * and (implicitly) by the \link verify()\endlink
		 * function in which slow-down values starting from
		 * zero is successively increased and in each iteration
		 * a decoding attempt is performed until the vault
		 * has been successfully be opened or all slow-down
		 * values smaller than \link getSlowDownFactor()\endlink
		 * have been tested.
		 *
		 * @param slowDownValue A guess for the slow-down value.
		 *
		 * @return A candidate for the correct vault polynomial
		 * (which is correct if the guess for the slow-down value
		 * is correct).
		 *
		 * @warning If this object does not contain (a candidate) for
		 * decrypted vault polynomial data, i.e.,
		 * if \link isDecrypted()\endlink returns <code>false</code>,
		 * then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If <code>slowDownVal</code> not smaller
		 * than \link getSlowDownFactor()\endlink or negative, then an
		 * error message will be printed to <code>stderr</code> and
		 * the program exits with status 'EXIT_FAILURE'.
		 *
		 * @warning If not enough memory could be allocated, an error
		 * message will be printed to <code>stderr</code> and the program
		 * exits with status 'EXIT_FAILURE'.
		 */
		SmallBinaryFieldPolynomial unpackVaultPolynomial
			( const BigInteger & slowDownValue = BigInteger(0) ) const;

		/**
		 * @brief Evaluates the reordering of a quantized feature element
		 * through which they are passed to avoid a certain record
		 * multiplicity attack.
		 *
		 * @details To prevent the application of an extended Euclidean
		 * algorithm based record multiplicity attack, each fuzzy vault
		 * object is attached with a public pseudo-random permutation
		 * process (for which \link getHash()\endlink serves as the seed)
		 * acting on the feature universe. The reordering of such a
		 * quantized feature (encoded as a finite field element) can be
		 * evaluated via this function.
		 *
		 * @param a The feature element of which the reordering is
		 * evaluated.
		 *
		 * @return The reordering of <i>a</i>.
		 *
		 * @warning If \link isEnrolled()\endlink returns
		 * <code>false</code>, an error message may be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If <i>a</i> is not smaller
		 * than \link getVaultSize()\endlink, then an error message will
		 * be printed to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 */
		uint32_t reorder( uint32_t a ) const;

		/**
		 * @brief Returns the (maximal) multiplicity with which the
		 * Guruswami-Sudan-based decoder is run on verification/opening
		 * the vault.
		 *
		 * @details By default this function returns 1 but it can be
		 * overwritten such that it returns a possibly larger value. The
		 * larger the result of this function the more errors can be
		 * tolerated on verification; on the other hand, the larger the
		 * result of this function, the more time may be required.
		 *
		 * @return The value 1 (unless overwritten for a subclass).
		 */
		virtual int getGuruswamiSudanMultiplicity() const;

		/**
		 * @brief Returns the (maximal) number of decoding iterations with
		 * which a randomized polynomial interpolation decoder is run on
		 * verification/opening the vault.
		 *
		 * @return The value 0 (unless overwritten for a subclass).
		 */
		virtual int getNumDecIts() const;

		/**
		 * @brief The Reed-Solomon decoder used for this object
		 * on verification of a positive claim.
		 *
		 * @details Unless overwritten for a subclass, the function
		 * is implemented as follows. The maximal Guruswami-Sudan
		 * multiplicity
		 * <br><br>
		 * <code>
		 *  int m = \link getGuruswamiSudanMultiplicity()\endlink;
		 * </code>
		 * <br><br>
		 * is read. Then, if <code>m>=0</code> a classical Reed-Solomon
		 * decoding attempt
		 * <code>
		 *  \link ReedSolomonCode::decode()\endlink
		 * </code>
		 * is conducted and, if successfully reveals a polynomial
		 * with the input hash value, stores the result in <i>f</i> and
		 * returns <code>true</code>. Otherwise, the function successively
		 * calls a Guruswami-Sudan
		 * decoder \link GuruswamiSudanDecoder::decode()\endlink
		 * with multiplicity <code>m0=1,...,m</code>. If one of the decoded
		 * lists contains a polynomial with the input hash value
		 * <code>hash</code>, the function stores this polynomial in <i>f</i>
		 * and returns <code>true</code>. Otherwise, the function runs the
		 * following iteration
		 * <br><br>
		 * <code>
		 *  int D = getNumDecIts()
		 * </code>
		 * <br><br>
		 * times: Randomly select <i>k</i> distinct pairs <i>(x[j],y[j])</i>,
		 * computes its interpolation polynomial, checks if its hash value
		 * agrees with <code>hash</code>, and, if true, assign <i>f</i> by
		 * the result and return <code>true</code>. If for no of the
		 * <code>D</code> iterations a valid polynomial has been found, the
		 * function finally returns <code>false</code>.
		 * <br><br>
		 * Note that any calls of the classical Reed-Solomon decoder,
		 * Guruswami-Sudan decoder, or randomized polynomial interpolation
		 * decoder can be suppressed by
		 * overwriting \link getGuruswamiSudanMultiplicity()\endlink
		 * or \link getNumDecIts()\endlink to return negative values or
		 * zero for a subclass.
		 *
		 * @param f After successful decoding, <i>f</i> represents
		 * the Reed-Solomon code polynomial; otherwise, the value of <i>f</i>
		 * will be left unchanged.
		 *
		 * @param x
		 *             Abscissa coordinates
		 *
		 * @param y
		 *             Ordinate coordinates
		 *
		 * @param u
		 *             Number of valid finite field pairs <i>(x[j],y[j])</i>.
		 *
		 * @param k
		 *             Length of the secret polynomial the degree of is
		 *             strictly smaller than <i>k</i>.
		 *
		 * @param hash
		 *             160-bit hash value of the correct secret polynomial
		 *             <i>f</i>, that has been originally computed via an
		 *             equivalent to
		 *             <code>
		 *              SHA().hash(hash,f.getData(),f.deg()+1)
		 *             </code>
		 *
		 * @return <code>true</code> if the decoding attempt was successful
		 * and <code>false</code> otherwise.
		 */
		virtual bool decode
		( SmallBinaryFieldPolynomial & f ,
		  const uint32_t *x , const uint32_t *y , int u , int k ,
		  const uint8_t hash[20] ) const;

		/**
		 * @brief Returns the number of bytes needed to export this fuzzy vault
		 * object to a data array.
		 *
		 * @return The number of bytes needed to export this object to a data
		 * array via \link toBytes()\endlink
		 *
		 * @see toBytes()
		 *
		 * @warning If this object does not represent a successfully enrolled
		 * fuzzy vault (i.e., for which the result of \link enroll()\endlink
		 * is <code>false</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 */
		int getSizeInBytes() const;

		/**
		 * @brief Exports the successfully enrolled fuzzy vault object to
		 * a data array.
		 *
		 * @param data An array that can store at
		 * least \link getSizeInBytes()\endlink bytes.
		 *
		 * @warning If this object does not represent a successfully enrolled
		 * fuzzy vault (i.e., for which the result of \link enroll()\endlink
		 * is <code>false</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 */
		void toBytes( uint8_t *data ) const;

		/**
		 * @brief Imports a fuzzy vault object from a data array.
		 *
		 * @param data An array storing <code>dataSize</code> bytes.
		 *
		 * @param dataSize The number of bytes stored in <code>data</code>.
		 *
		 * @return <code>true</code> if the fuzzy vault object has been
		 * successfully imported from <code>(data,dataSize)</code>; otherwise,
		 * the function returns <code>false</code> in which case the state of
		 * the fuzzy vault object remains unchanged.
		 */
		bool fromBytes( const uint8_t *data , int dataSize );

		/**
		 * @brief Writes this fuzzy vault object to the specified output
		 * stream.
		 *
		 * @param out The output stream to which this fuzzy vault object
		 * is exported.
		 *
		 * @return <code>true</code> if the fuzzy vault object has been
		 * successfully written to <code>out</code>; otherwise, if on writing
		 * the bytes, an error occurred, the function returns
		 * <code>false</code>.
		 *
		 * @warning If this object does not represent a successfully enrolled
		 * fuzzy vault (i.e., for which the result of \link enroll()\endlink
		 * is <code>false</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If not enough memory could be allocated to write this
		 * fuzzy vault object, an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 */
		bool write( FILE *out ) const;

		/**
		 * @brief Writes this fuzzy vault object to a file specified by
		 * its path.
		 *
		 * @param filePath A string specifying the path to the file to
		 * which this fuzzy vault object is written.
		 *
		 * @return <code>true</code> if the fuzzy vault object has been
		 * successfully written to the specified path; otherwise, if an error
		 * occurred, the function returns <code>false</code>.
		 *
		 * @warning If this object does not represent a successfully enrolled
		 * fuzzy vault (i.e., for which the result of \link enroll()\endlink
		 * is <code>false</code>), then an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @warning If not enough memory could be allocated to write this
		 * fuzzy vault object, an error message will be printed to
		 * <code>stderr</code>.
		 */
		bool write( const std::string & filePath ) const;

		/**
		 * @brief Attempts to import a fuzzy vault object from the specified
		 * input stream.
		 *
		 * @param in The input stream from which a fuzzy vault object is
		 * imported.
		 *
		 * @return <code>true</code> if a fuzzy vault object has been
		 * successfully imported; otherwise, the function
		 * returns <code>false</code> and leaves the content of this object
		 * unchanged.
		 *
		 * @warning If not enough memory could be allocated to import the
		 * fuzzy vault object, an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 */
		bool read( FILE *in );

		/**
		 * @brief Attempts to read a fuzzy vault object from the specified
		 * file.
		 *
		 * @param filePath A string specifying the path to the file from
		 * which the fuzzy vault object is read.
		 *
		 * @return <code>true</code> if the fuzzy vault object has been
		 * successfully read; otherwise, the function
		 * returns <code>false</code> and leaves the content of this object
		 * unchanged.
		 *
		 * @warning If not enough memory could be allocated to import the
		 * fuzzy vault object, an error message will be printed to
		 * <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'.
		 */
		bool read( const std::string & filePath );

		/**
		 * @brief Convenience method that generates an instance of the
		 * improved fuzzy vault scheme from a feature set and the size
		 * of a randomly generated secret polynomial.
		 *
		 * @details Given the elements <i>A[0],...,A[t-1]</i> of the feature
		 * set, the method generates a polynomial <i>f</i> of degree smaller
		 * than <i>k</i> and then computes the polynomial
		 * \f[
		 *  V(X)=f(X)+\prod_{j=0}^{t-1}(X-A[j])
		 * \f]
		 * as an instance of the improved fuzzy vault scheme. Finally, the
		 * method returns the polynomial <i>f</i> which, in a practical
		 * situation, should be kept secret.
		 *
		 * @warning This method is provided for the purpose of experimental
		 * analysis and not for the generation of cryptographically secure
		 * data.
		 *
		 * @param V Output reference in which the data of the final polynomial,
		 * representing the instance of the improved fuzzy vault scheme, is
		 * stored.
		 *
		 * @param A Feature set storing <code>t</code> integers of type
		 * <code>uint32_t</code> each encoding an element in the finite
		 * field \link SmallBinaryFieldPolynomial::getField() V.getField()\endlink.
		 *
		 * @param t The number of finite field elements (encoded as integers
		 * of type <code>uint32_t</code>) stored in <code>A</code>; must be a
		 * positive value at least equals to <i>k</i>.
		 *
		 * @param k The size of the secret polynomial bound to the feature set
		 * <code>(A,t)</code>; must be a positive integer and not larger
		 * than <i>t</i>.
		 *
		 * @param tryRandom If true, the library is advised to choose a
		 * cryptographically secure number generator; otherwise, the C-library's
		 * standard pseudo-random number generator is used.
		 *
		 * @return The secret polynomial <i>f</i> bound to the improved fuzzy
		 * vault scheme.
		 */
		static SmallBinaryFieldPolynomial createInstance
		( SmallBinaryFieldPolynomial & V ,
		  const uint32_t *A , int t , int k , bool tryRandom = false );

		/**
		 * @brief Convenience method that generates an instance of the
		 * improved fuzzy vault scheme.
		 *
		 * @details The method generates a feature set
		 * <i>A[0],...,A[t-1]</i> with elements from the finite
		 * field \link SmallBinaryFieldPolynomial::getField() V.getField()\endlink
		 * at random. Also, the method generates a polynomial <i>f</i> of
		 * degree smaller
		 * than <i>k</i> and computes the polynomial
		 * \f[
		 *  V(X)=f(X)+\prod_{j=0}^{t-1}(X-A[j])
		 * \f]
		 * as an instance of the improved fuzzy vault scheme. Finally, the
		 * method returns the polynomial <i>f</i> which, in a practical
		 * situation, should be kept secret.
		 *
		 * @warning This method is provided for the purpose of experimental
		 * analysis and not for the generation of cryptographically secure
		 * data.
		 *
		 * @param V Output reference in which the data of the final polynomial,
		 * representing the instance of the improved fuzzy vault scheme, is
		 * stored.
		 *
		 * @param t The size of the feature set; must be a positive value
		 * larger than or equals to <i>k</i>.
		 *
		 * @param k The size of the secret polynomial bound to the feature set
		 * <code>(A,t)</code>; must be a positive integer smaller than or
		 * equals to <i>t</i>.
		 *
		 * @param tryRandom If true, the library is advised to choose a
		 * cryptographically secure number generator; otherwise, the C-library's
		 * standard pseudo-random number generator is used.
		 *
		 * @return The secret polynomial <i>f</i> bound to the improved fuzzy
		 * vault scheme.
		 */
		static SmallBinaryFieldPolynomial createInstance
		( SmallBinaryFieldPolynomial & V , int t , int k ,
		  bool tryRandom = false );

		/**
		 * @brief Convenience method with which a random feature set is
		 * generated.
		 *
		 * @param features Output array in which <i>t</i> different elements
		 * from the field specified by <code>gf</code> are stored.
		 *
		 * @param t The size of the feature set; must be non-negative.
		 *
		 * @param gf The finite field from which the feature elements
		 * are chosen.
		 *
		 * @param tryRandom If true, the library is advised to choose a
		 * cryptographically secure number generator; otherwise, the C-library's
		 * standard pseudo-random number generator is used.
		 */
		static void createFeatureSet
		( uint32_t *features , int t , const SmallBinaryField & gf ,
		  bool tryRandom = false );

		/**
		 * @brief
		 *            Convenience method that creates two feature
		 *            sets of length <i>s</i> and <i>t</i> each
		 *            containing disjoint elements that share
		 *            exactly <i>omega</i> elements.
		 *
		 * @param A
		 *            First feature set containing <i>s</i> elements
		 *            on output each smaller than <i>n</i>.
		 *
		 * @param s
		 *            Size of first feature set <i>A</i>, i.e., number
		 *            of integers of type <code>uint32_t</code>.
		 *
		 * @param B
		 *            Second feature set containing <i>t</i> elements
		 *            on output each smaller than <i>n</i>.
		 *
		 * @param t
		 *            Size of second feature set <i>B</i>, i.e., number
		 *            of integers of type <code>uint32_t</code>.
		 *
		 * @param omega
		 *            Number of <code>uint32_t</code> that <i>A</i> and
		 *            <i>B</i> will share.
		 *
		 * @param n
		 *            Bound on integer representation of the elements
		 *            stored in <i>A</i> and <i>B</i>.
		 *
		 * @param tryRandom
		 *            specifies whether the function is advised to use
		 *            a cryptographic random generator.
		 *
		 * @warning
		 *            If <i>omega</i> is smaller than <i>s</i> or
		 *            <i>t</i>, an error message will be printed to
		 *            <code>stderr</code> and the program exits with
		 *            status 'EXIT_FAILURE'.
		 *
		 * @warning
		 *            If <i>s</i>, <i>t</i>, or <i>omega</i> are
		 *            negative, an error message will be printed to
		 *            <code>stderr</code> and the program exits with
		 *            status 'EXIT_FAILURE'.
		 *
		 * @warning
		 *            If <code>maxSize</code> is smaller than <i>s</i>
		 *            or <i>t</i>, an error message will be printed to
		 *            <code>stderr</code> and the program exits with
		 *            status 'EXIT_FAILURE'.
		 *
		 * @warning
		 *            If <i>A</i> or <i>B</i> cannot store at least
		 *            <i>s</i> and <i>t</i> integers, respectively, of
		 *            type <code>uint32_t</code>, the program runs into
		 *            undocumented behavior.
		 */
		static void createOverlappingFeatureSets
		( uint32_t *A , int s , uint32_t *B , int t , int omega ,
		  uint32_t n , bool tryRandom = false );

		/**
		 * @brief Convenience function counting the number of
		 * two feature sets' common elements.
		 *
		 * @param A First feature set containing <i>s</i> integers of
		 * type <code>uint32_t</code>
		 *
		 * @param s The number of <code>uint32_t</code>s stored in
		 * <code>A</code>; must be non-negative.
		 *
		 * @param B Second feature set containing <i>s</i> integers of
		 * type <code>uint32_t</code>
		 *
		 * @param t The number of <code>uint32_t</code>s stored in
		 * <code>B</code>; must be non-negative.
		 *
		 * @return If both (A,s) and (B,s) contain distinct integers of
		 * type <code>uint32_t</code>, then the function correctly contains
		 * the number of the two feature set's common elements.
		 */
		static int numOverlap
		( uint32_t *A , int s , uint32_t *B , int t );

	private:

		/**
		 * @brief The size of the vault.
		 *
		 * @details The size of the vault must be specified externally and
		 * no automatic mechanism for determining the size of the vault is
		 * provided by this class.
		 * <br>
		 * As the vault size has been specified, this fuzzy vault object
		 * automatically generates a finite field object \link gfPtr\endlink
		 * through \link updateField()\endlink which is at least two times as
		 * large as the vault size \link n\endlink.
		 * <br><br>
		 * To specify the vault size, the (non-standard)
		 * constructor \link FuzzyVault(int,int,int)\endlink can be used, or,
		 * after the fuzzy vault object has been generated, through the
		 * setter \link setVaultSize(int)\endlink.
		 *
		 * @see FuzzyVault(int,int,int)
		 * @see setVaultSize(int)
		 * @see getVaultSize()
		 */
		int n;

		/**
		 * @brief An upper bound for the number of features that this
		 * fuzzy vault can protect.
		 *
		 * @details The value of this field must be specified externally; no
		 * automatic mechanism for determining its value is provided by this
		 * class.
		 * <br><br>
		 * To specify the value of this field, the (non-standard)
		 * constructor \link FuzzyVault(int,int,int)\endlink can be used, or,
		 * after the fuzzy vault object has been generated, through the
		 * setter \link setMaxGenuineFeatures(int)\endlink.
		 *
		 * @see FuzzyVault(int,int,int)
		 * @see setMaxGenuineFeatures(int)
		 * @see getMaxGenuineFeatures()
		 */
		int tmax;

		/**
		 * @brief The size of the secret polynomial generated and being
		 * bound the the feature set on enrollment.
		 *
		 * @details The value of this field must be specified externally;
		 * no automatic mechanism determining its value is provided by this
		 * class.
		 *
		 * To specify the value of this field, the (non-standard)
		 * constructor \link FuzzyVault(int,int,int)\endlink can be used, or,
		 * after the fuzzy vault object has been generated, through the
		 * setter \link setSecretSize(int)\endlink.
		 *
		 * @see FuzzyVault(int,int,int)
		 * @see setSecretSize(int)
		 * @see getSecretSize()
		 */
		int k;

		/**
		 * @brief Pointer to the finite field over which the fuzzy vault
		 * performs its computations.
		 *
		 * @details As long as no vault size (i.e., the
		 * parameter \link n\endlink) has been specified, the
		 * value of this member should be set to NULL. If the vault
		 * size has is specified (using the standard
		 * constructor \link FuzzyVault(int,int,int)\endlink or
		 * with the setter \link setVaultSize()\endlink), this causes
		 * a call of the \link updateField()\endlink method which
		 * lets this member point to an appropriate finite field
		 * object.
		 *
		 * @see updateField()
		 */
		SmallBinaryField *gfPtr;

		/**
		 * @brief The slow down factor with which the verification
		 * process with this fuzzy vault object can be artificially
		 * slowed down.
		 *
		 * @details Unless specified externally, the slow down factor
		 * is equals to 1.
		 *
		 * @see setSlowDownFactor()
		 * @see getSlowDownFactor()
		 */
		BigInteger slowDownFactor;

		/**
		 * @brief Decrypted vault data.
		 *
		 * @details If this fuzzy vault object contains encrypted
		 * data, then the field \link encryptedVaultPolynomialData\endlink
		 * is non-NULL and the value of this field is NULL.
		 * <br><br>
		 * If this fuzzy vault object contains encrypted data, i.e.,
		 * if \link encryptedVaultPolynomialData\endlink is non-NULL, then on
		 * verification, the fuzzy vault object must be decrypted
		 * using \link decrypt()\endlink. This copies the decrypted data
		 * in \link vaultPolynomialData\endlink but does not change the
		 * content of \link encryptedVaultPolynomialData\endlink.
		 *
		 * @see unpackVaultPolynomial()
		 */
		uint8_t *vaultPolynomialData;

		/**
		 * @brief Encrypted vault data.
		 *
		 * @details After \link enroll() enrollment\endlink the protected
		 * minutiae template can additionally be encrypted through a key,
		 * password or PIN to improve security. If the vault is additionally
		 * protected by a \link AES128 key\endlink, this member will be
		 * non-<code>NULL</code> and <code>NULL</code> otherwise.
		 * <br><br>
		 * On verification, the fuzzy vault object must be decrypted
		 * using \link decrypt()\endlink which copies the decrypted data
		 * in \link vaultPolynomialData\endlink but does not change the
		 * content of \link encryptedVaultPolynomialData\endlink.
		 *
		 * @see encrypt()
		 * @see decrypt()
		 */
		uint8_t *encryptedVaultPolynomialData;

		/**
		 * @brief SHA-1 hash value of the secret polynomial protecting
		 * the feature set both being bound and obfuscating each other by
		 * this fuzzy vault object.
		 *
		 * @details On \link enroll() enrollment\endlink, a feature set is
		 * bound to a \link SmallBinaryFieldPolynomial secret polynomial\endlink
		 * of which any data is dismissed except its SHA-1 hash value. This
		 * value which is stored in this field.
		 *
		 * @see getHash()
		 */
		uint8_t hash[20];

		/**
		 * @brief A record-specific public permutation process used to shuffle
		 * the feature sets prior protection in order to avoid a certain
		 * record multiplicity attacks.
		 *
		 * @details Without preventions, an adversary may determine related
		 * from non-related fuzzy vault objects and, even worse, he may break
		 * them entirely with quite a high probability using an attack
		 * based on the Euclidean algorithm (see \link EEAAttack\endlink).
		 * To prevent successful application of the attack, each fuzzy vault
		 * object is attached with a record-specific but public permutation
		 * process acting on the feature sets which.
		 *
		 * This field is updated on each enrollment
		 * via \link updatePermutation()\endlink. The permutation can be
		 * accessed via the \link reorder()\endlink function.
		 *
		 * Note that the permutation is generated pseudo-randomly
		 * using the 160 bits of \link hash\endlink as the random generator's
		 * seed. In this way, no additional storage bits are required when
		 * storing a successfully enrolled fuzzy vault object.
		 *
		 * @see reorder()
		 * @see _reorder()
		 * @see updatePermutation()
		 */
		Permutation permutation;

		/**
		 * @brief Initializes this object's members such that it represents an
		 * empty uninitialized fuzzy vault object.
		 *
		 * @details This method is called by the standard and copy
		 * constructor.
		 */
		void first_init();

		/**
		 * @brief Updates the finite field such that it can encode each
		 * element of the feature universe.
		 *
		 * @details After the vault size \link n\endlink has been specified
		 * externally through the standard
		 * constructor \link FuzzyVault(int,int,int)\endlink or the
		 * setter \link setVaultSize(int)\endlink, the finite field, i.e.,
		 * the content of \link gfPtr\endlink, must be updated.
		 *
		 * More specifically, if <i>n</i> is the vault size of
		 * <i>d</i>-bits length, then a finite field containing \f$2^{2d}\f$
		 * is chosen.
		 *
		 * Although a field of size \f$2^{d}\f$ is sufficient to encode
		 * integers between 0,...,<i>n</i>-1, some field elements are, however,
		 * used to encode <i>blending features</i>: On enrollment, fewer
		 * than \link tmax\endlink feature elements might be protected by
		 * this fuzzy vault object; if this is the case, the feature elements
		 * are supplemented with blending features chosen from the set of
		 * field elements not encoding an integer from 0,...,<i>n</i>-1.
		 *
		 * @warning If not enough memory could be provided, an error message
		 * is printed to <code>stderr</code> and the program exits with
		 * status 'EXIT_FAILURE'.
		 */
		void updateField();

		/**
		 * @brief Generates a public user-specific permutation process
		 * acting on the feature universe.
		 *
		 * @details On enrollment, the to-be-protected feature set must
		 * be passed through a public record-specific permutation process to
		 * prevent certain record multiplicity attacks
		 * (see \link EEAAttack\endlink). The method generates this
		 * permutation process by updating the \link permutation\endlink
		 * member using a \link RandomGenerator random generator\endlink whose
		 * seed is derived from the hash value of the secret polynomial
		 * (i.e., the content of the \link hash\endlink member). In this way
		 * the permutation is randomly generated from a random 160-bit pool.
		 *
		 * @see permutation
		 */
		void updatePermutation();

		/**
		 * @brief Packs an instance of the fuzzy vault by Dodis et al.
		 * (encoded as a polynomial) in a data array of this fuzzy vault
		 * object.
		 *
		 * @details Let
		 * \f[
		 *   V(X)=X^t+\sum_{j=0}^{t-1} V_j\cdot X^j
		 * \f]
		 * be the vault polynomial passed to this function.
		 * Write \f$b_{0},...,b_{m-1}\f$ be the bit sequence resulting
		 * from the concatenation of the coefficients \f$V_0,...,V_{t-1}\f$.
		 * Let \f$b_{m},...,b_{M-1}\f$ be random bits such
		 * that \f$M=96\cdot\lceil m/96\rceil\f$,
		 * i.e., \f$ b_{0},...,b_{m-1}\f$ are padded with random bits such
		 * that the total number of bits becomes a multiple of 96.
		 * An \link AES128 AES key\endlink is then derived from a random
		 * positive integer smaller than \link getSlowDownFactor()\endlink
		 * and is used to "encrypt" the bits \f$b_0,...,b_{M-1}\f$. In such a
		 * way we obtain the "encrypted" bit sequence
		 * \f[
		 *  (b'_0,...,b'_{M-1})
		 * \f]
		 * which is stored byte-wisely in \link vaultPolynomialData\endlink.
		 *
		 * @param V The polynomial packed
		 * into \link vaultPolynomialData\endlink.
		 *
		 *
		 * @warning The field \link vaultPolynomialData\endlink will be
		 * directly assigned with freshly allocated memory; thus, before
		 * calling this method it must be ensured that possibly allocated
		 * memory, to which \link vaultPolynomialData\endlink refers, is freed;
		 * otherwise, the running program causes memory leakages.
		 *
		 * @warning If \link tmax\endlink or \link gfPtr\endlink are not properly
		 * initialized, the behavior of this method is undocumented.
		 *
		 * @warning If not enough memory can be provided, an error message
		 * is printed <code>stderr</code> and the program exits with status
		 * 'EXIT_FAILURE'
		 *
		 * @warning The polynomial represented by <code>V</code> should
		 * be defined over the field \link getField()\endlink; otherwise, the
		 * method runs into undocumented behavior.
		 */
		void packVaultPolynomial( const SmallBinaryFieldPolynomial & V );

		/**
		 * @brief Evaluates the reordering of a quantized feature element
		 * through which they are passed to avoid a certain record
		 * multiplicity attack.
		 *
		 * @details To prevent the application of an extended Euclidean
		 * algorithm based record multiplicity attack, each fuzzy vault
		 * object is attached with a public pseudo-random permutation
		 * process (for which \link getHash()\endlink serves as the seed)
		 * acting on the feature universe. The reordering of such a
		 * quantized feature (encoded as a finite field element) can be
		 * evaluated via this function.
		 *
		 * @param a The feature element of which the reordering is
		 * evaluated.
		 *
		 * @return The reordering of <i>a</i>.
		 *
		 * @warning This function is a low-level version
		 * of \link reorder()\endlink which in fact is wrapped around this
		 * function and performs several consistency checks that, if they
		 * are not fulfilled, result in the executing program to output
		 * an error message followed by an exit of the program. If these
		 * requirements are not fulfilled, the behavior of this method is
		 * undocumented.
		 */
		uint32_t _reorder( uint32_t a ) const;

		/**
		 * @brief Determines how many bytes are needed to hold the data of
		 * the packed vault polynomial.
		 *
		 * @details The function is used to determine how many bytes are
		 * needed to initialize an array of 128 bit blocks that can hold the
		 * data of this fuzzy vault object's vault polynomial being of degree
		 * smaller than \link tmax\endlink such that it can be protected with
		 * an \link AES128 AES key\endlink.
		 *
		 * @return Number of bytes needed to hold the data of a monic
		 * polynomial of degree smaller than \link tmax\endlink having
		 * coefficients in the field \link gfPtr\endlink such that the byte
		 * array is a multiple of 16 bytes (i.e., 128 bits).
		 */
		int vaultDataSize() const;

		/**
		 * @brief Performs an assertion check on the specified feature set.
		 *
		 * @details The method asserts
		 * <ul>
		 *  <li>
		 *   that the size <code>t</code> of the specified feature set is not
		 *   negative
		 *  </li>
		 *  <li>
		 *   that the feature elements are encoded by integers between
		 *   0,...,<i>n</i>-1 where <i>n</i>=\link getVaultSize()\endlink
		 *  </li>
		 *  <li>
		 *   that the array <code>features</code> does not contain
		 *   multiple elements
		 *  </li>
		 * </ul>
		 * If either of these properties are violated, the method prints an
		 * error message to <code>stderr</code> and exits with status
		 * 'EXIT_FAILURE'.
		 *
		 * @param features Contains <code>t</code> integers of
		 * type <code>uint32_t</code>.
		 *
		 * @param t Size of the feature set, i.e., the number of feature
		 * elements encoded as integers of type <code>uint32_t</code> being
		 * stored in <code>features</code>.
		 */
		void checkFeatureSet( const uint32_t *features , int t ) const;

		/**
		 * @brief
		 *            Derives an AES key from the specified integer.
		 *
		 * @details
		 *            The bytes of the specified integer are extracted
		 *            via the \link BigInteger::toBytes() x.toBytes()\endlink
		 *            method and then its \link SHA SHA hash value\endlink
		 *            is computed; the first 16 bytes of the value
		 *            are used to define the \link AES128 AES key\endlink
		 *            returned by this function.
		 *
		 * @param x
		 *            The integer of which an AES key is computed with
		 *            this function.
		 *
		 * @return
		 *            The AES key derived from <code>x</code>.
		 *
		 * @warning
		 *             If not enough memory can be provided, an error message
		 *             is printed <code>stderr</code> and the program exits
		 *             with status 'EXIT_FAILURE'
		 */
		static AES128 deriveKey( const BigInteger & x );

		/**
		 * @brief
		 *           Store the concatenation of a sequence of <i>d</i>-bit
		 *           vectors in a byte array and supplement it with random
		 *           bits.
		 *
		 * @details
		 *           The method is used to convert an instance of the improved
		 *           fuzzy vault scheme (encoded by <i>t</i>
		 *           elements of a binary finite field of degree <i>d</i>)
		 *           to a byte array that can be encrypted via an
		 *           \link AES128 AES key\endlink. The random bits are needed
		 *           to make the unencrypted array indistinguishable from falsely
		 *           decrypted data.
		 *
		 * @param bits
		 *           The concatenation of the bit vectors.
		 *
		 * @param vecs
		 *           Array of <i>t</i> 32-bit word each encoding a <i>d</i>-bit
		 *           vector.
		 *
		 * @param t
		 *           Number of 32-bit words contained in <code>array</code>.
		 *
		 * @param d
		 *           Number of significant bits of each 32-bit vector.
		 *
		 * @param n
		 *           Controls how many bits in <code>bits</code> are
		 *           supplemented by random values. More precisely, the latest
		 *           <i>8*n-t*d</i> bits in <code>bits</code> are selected
		 *           randomly.
		 */
		static void concat_bit_vectors
		( uint8_t *bits , const uint32_t *vecs , int t , int d , int n );

		/**
		 * @brief
		 *            Deconcatenate a bit sequence into <i>d</i>-bit strings
		 *            stored in 32 bit words.
		 *
		 * @details
		 *            The method is used to re-obtain the candidate of
		 *            the improved fuzzy vault instance data from a byte
		 *            array or after decryption.
		 *
		 * @param vecs
		 *            Output vector that will contain <i>t</i> 32-bit words
		 *            of <i>d</i> significant bits.
		 *
		 * @param bits
		 *            Byte array encoding the <i>t*d</i> bit sequence that
		 *            is deconcatenated into <code>vecs</code>.
		 *
		 * @param t
		 *            Number of <i>d</i>-bit strings stored in the bit sequence
		 *            <code>bits</code>.
		 *
		 * @param d
		 *            Positive integer smaller than or equals 32 controlling
		 *            the length of the bit strings encoded in the sequence
		 *            <code>bits</code>.
		 */
		static void split_into_bit_vectors
		( uint32_t *vecs , const uint8_t *bits , int t , int d  );
	};
}



#endif /* THIMBLE_FUZZYVAULT_H_ */
